import type { GeneratedTypeConfig, IsNever } from '@intlify/core-base'
import type { ExportedGlobalComposer } from './i18n'
import type { VueI18n } from './legacy'

export type Disposer = () => void

/**
 *
 * The interface used for narrowing types using generated types.
 *
 * @remarks
 *
 * The type generated by 3rd party (e.g. nuxt/i18n)
 *
 * @example
 * ```ts
 * // generated-i18n-types.d.ts (`.d.ts` file at your app)
 *
 * declare module '@intlify/core-base' {
 *   interface GeneratedTypeConfig {
 *     legacy: false
 *   }
 * }
 * ```
 */
export { GeneratedTypeConfig }

/**
 * Narrowed i18n instance type based on `GeneratedTypeConfig['legacy']`
 *
 * - `never` (unset) resolves to `VueI18n | ExportedGlobalComposer`
 * - `true` resolves to `VueI18n`
 * - `false` resolves to `ExportedGlobalComposer`
 */
export type GeneratedInstanceType =
  GeneratedTypeConfig extends Record<'legacy', infer Legacy> ? Legacy : never

/** @VueI18nGeneral */
export type VueI18nInstance =
  IsNever<GeneratedInstanceType> extends true
    ? VueI18n | ExportedGlobalComposer
    : GeneratedInstanceType extends true
      ? VueI18n
      : ExportedGlobalComposer
